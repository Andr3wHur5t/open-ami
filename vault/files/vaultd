#!/bin/sh
#
#       Daemon for vault
#
# chkconfig:   345 99 20
# description: Daemon for vault
# processname: vault

### BEGIN INIT INFO
# Provides:       vault
# Required-Start: $network
# Required-Stop:
# Should-Start:
# Should-Stop:
# Default-Start: 3 4 5
# Default-Stop:  0 1 6
# Short-Description: start and stop vault
# Description: Daemon for vault
### END INIT INFO

PROG=vault
USER=vault
VAULT_BIN=/usr/bin/$PROG
VAULT_CONF=/etc/init/vault.conf
LOCKFILE=/var/lock/subsys/$PROG
DAEMON_HOME="/home/$USER/"
OPTIONS="server -config $VAULT_CONF"

VAULT_CLUSTER_ADDR="https://$(hostname).ec2.internal:8200"

get_arg() {
  CONFIG_FILE="/home/vault/conf"
  echo "$(grep "$1=" "$CONFIG_FILE" | cut -d '=' -f2-)";
}

VAULT_REDIRECT_ADDR=`get_arg VAULT_REDIRECT_ADDR`
AWS_DEFAULT_REGION=`get_arg AWS_DEFAULT_REGION`
AWS_DYNAMODB_TABLE=`get_arg AWS_DYNAMODB_TABLE`

. /etc/init.d/functions

vaultAddr() {
  echo "http://$(cat $VAULT_CONF |awk '/address/ {x=$3} END {print x}'|sed 's/"//g')"
}

vaultPID() {
  echo "`ps -C vault|awk 'END {print $1}'|grep -v PID`"
}

start() {
  if [ -f "$LOCKFILE" ]; then
    action $"Starting $PROG: (Locked) " /bin/true
    return 0
  fi
  # Run as non root user; this prevents memory retrieval if vault is pwned
  sudo -i -u $USER AWS_DEFAULT_REGION="$AWS_DEFAULT_REGION" AWS_DYNAMODB_TABLE="$AWS_DYNAMODB_TABLE"\
    VAULT_REDIRECT_ADDR="$VAULT_REDIRECT_ADDR" VAULT_CLUSTER_ADDR="$VAULT_CLUSTER_ADDR"  \
	  $VAULT_BIN server -config $VAULT_CONF 2>&1 >> /var/log/vault.log&

  RETVAL=$?
  if [ $RETVAL -eq 0 ]; then
	  touch $LOCKFILE
	  action $"Starting $PROG: " /bin/true
  else
	  action $"Starting $PROG: " /bin/false
  fi
  return $RETVAL
}

stop() {
  PID="`vaultPID`"
  if [ -z "$PID" ]; then
    # not running; per LSB standards this is "ok"
    action $"Stopping $PROG: (Already Stopped) " /bin/true
    return 0
  fi


  if [ -n "$PID" ]; then
    # Seal The Instance To ensure data is protected
    $VAULT_BIN seal -address=`vaultAddr`
    SEAL_RETVAL=$?
    if [ $SEAL_RETVAL -ne 0 ]; then
      RETVAL=1
      action $"Sealing $PROG: " /bin/false
    else
      action $"Sealing $PROG: " /bin/true
    fi

    # Kill The Instance
    /bin/kill "$PID" >/dev/null 2>&1
    RETVAL=$?
    if [ $RETVAL -ne 0 ]; then
        RETVAL=1
        action $"Stopping $PROG: " /bin/false
    else
        action $"Stopping $PROG: " /bin/true
    fi
  else
    # failed to read pidfile
    action $"Stopping $PROG: " /bin/false
    RETVAL=4
  fi
  [ $RETVAL -eq 0 ] && rm -f $LOCKFILE
  return $RETVAL

}

status() {
  if [ -z "`vaultPID`" ]; then
    echo "Vault is not running."
    return 3
  else
    $VAULT_BIN status -address=`vaultAddr`
  fi
  return 0
}

seal () {
  if [ -z "`vaultPID`" ]; then
    echo "Vault is not running."
    return 3
  else
    $VAULT_BIN seal -address=`vaultAddr`
RETVAL=$?
    action $"Sealing $PROG: " [ $RETVAL -eq 0 ]
    return $RETVAL
  fi
}

case "$1" in
  start)
    # Ensure we run with vault user; this limits exposure when vault is pwned
    start
    RETVAL=$?
    ;;
  stop)
    stop
    RETVAL=$?
    ;;
  status)
    status
    RETVAL=$?
    ;;
  seal)
    seal
    RETVAL=$?
    ;;
  *)
    echo $"Usage: vault {start|stop|status|seal}"
    RETVAL=2
    ;;
esac

exit $RETVAL
